function drawChart(data){

  // total = squat + bench + deadlift;

  displayContext = d3.select(".displayContext");

  content = displayContext
  // Responsive SVG needs these 2 attributes and no width and height attr.
  .attr("preserveAspectRatio", "xMinYMin meet")
  .attr("viewBox", "0 0 1200 600")
  // Class to make it responsive.
  .classed("svg-content-responsive", true)
  // Fill with a rectangle for visualization.


  dashWidth  = 1100;
  dashHeight = 600;

  maxTotal = data[3][data[3].length - 1];

   var scaleX = d3.scaleLinear()
                 .domain([0, 100])
                 .range([40, dashWidth]);

   var scaleY = d3.scaleLinear()
                 .domain([maxTotal, 0])
                 .range([40, dashHeight - 40]);


   var x_axis = d3.axisBottom()
                  .scale(scaleX);

   var y_axis = d3.axisRight()
                 .scale(scaleY);


   drawLine(data[0], "squat", scaleX, scaleY, "green");
   drawLine(data[1], "bench", scaleX, scaleY, "red");
   drawLine(data[2], "deadlift", scaleX, scaleY, "blue");
   drawLine(data[3], "total", scaleX, scaleY, "black");


    content.append("g")
      .attr("transform", "translate(0," + (dashHeight - 40) + ")")
      .call(x_axis);

    content.append("g")
      .attr("transform", "translate(" + 40 +  ",0)")
      .call(y_axis);
}


function drawLine(data, name, sx, sy, colour){

  sortedData = data;

  minValue = 0;
  maxValue = sortedData.length-1;

  console.log(minValue);

  var lineFunction = d3.line()
    .x(function(d, i) { return sx(100*((i - minValue) / (maxValue - minValue))) })
    .y(function(d) { return sy(d); })
    .curve(d3.curveBasis);

    var lineGraph = content.append("path")
    .attr("d", lineFunction(sortedData))
    .transition()
    .ease(d3.easeSin)
    .duration(2500)
    .attr("stroke", colour)
    .attr("stroke-width", 2)
    .attr("fill", "none")
    .attr("shape-rendering", "geometricPrecision");
}

function middleSort(data){

  //https://stackoverflow.com/a/21911322/10757449
  return data.sort(function(a, b) {
      return a - b;
  }).map(function(v, i, a) {
      var p = ~~(a.length / 2);
      return i >= p ? a[a.length - i + p - 1] : v;
  });

}
